import { useState, useEffect } from "react";

import SpotifyWebApi from "spotify-web-api-node";
import FormRowSelect from "../components/FormRowSelect";
import FormRow from "../components/FormRow";

const Dashboard = ({ token }) => {
  //Removes code generated by spotify from the URL
  window.history.pushState({}, null, "/");
  const [search, setSearch] = useState({
    playlistOneId: "",
    playlistTwoId: "",
  });
  const [playlist, setPlaylist] = useState({name: "", description: ""});
  const [isLoading, setIsLoading] = useState(true);
  const [allPlaylists, setAllPlaylists] = useState([]);
  const [newPlaylist, setNewPlaylist] = useState(true);

  const spotifyApi = new SpotifyWebApi({
    clientId: process.env.CLIENT_ID,
  });


  spotifyApi.setAccessToken(token);

 /**
  * Checks if a the user wants to add tracks from one playlist into an already existing playlist
  * or if they want an entirely new playlist with a custom name and description to be added
  */
  const createNewPlaylist = async () => {
    try {
      const resTwo = await spotifyApi.getPlaylistTracks(search.playlistTwoId, {
        limit: 50,
      });
      const formattedTracksTwo = resTwo.body.items.map((curr) => {
        return `spotify:track:${curr.track.id}`;
      });
      if (newPlaylist) {
        const resOne = await spotifyApi.getPlaylistTracks(
          search.playlistOneId,
          {
            limit: 50,
          }
        );
        const formattedTracksOne = resOne.body.items.map((curr) => {
          return `spotify:track:${curr.track.id}`;
        });
        const mergedPlaylist = formattedTracksOne.concat(formattedTracksTwo);
        const data = await spotifyApi.createPlaylist(
          playlist.name || "merged playlist",
          { description: playlist.description }
        );
        await spotifyApi.addTracksToPlaylist(data.body.id, mergedPlaylist);
      } else {
        await spotifyApi.addTracksToPlaylist(
          search.playlistOneId,
          formattedTracksTwo
        );
      }
    setAllPlaylists([])
    setNewPlaylist(false);
    } catch (error) {
      console.log(error)
    }
  };

  /**
   * Retrieves a user's is/username and uses that to retrieve
   * all of that user's private/puvlic playlists saved in their library
   */
  const getAllUserDetails = async () => {
    try {
      const res = await spotifyApi.getMe();
      const data = await spotifyApi.getUserPlaylists(res.body.id);

      setAllPlaylists(data.body.items);
      setSearch({
        playlistOneId: data.body.items[0].id,
        playlistTwoId: data.body.items[0].id,
      });
      console.log(search);
    } catch (error) {
      console.log(error)
    }
    
  }



  useEffect(() => {
    if (!token) return;
    //If token is present, gets a user's id and fetches all their playlists
    getAllUserDetails();
    setIsLoading(false);
  }, [token, newPlaylist]);



  const playlistChange = (e) => {
    if (!token) return;
    const name = e.target.name;
    const value = e.target.value;
    const key = allPlaylists.find((item) => item.name === value);
    setSearch({ ...search, [name]: key.id });
  };

  const handleDetailsChange = (e) => {
    if (!token) return;
    const name = e.target.name;
    const value = e.target.value;
    setPlaylist({...playlist, [name]: value});
  };

  //Generates a new playlist and id, and takes in an array of tracks from each individual playlist
  const handleClick = () => {
    if (!token) {
      token = false;
      return;
    }
    createNewPlaylist();
    setPlaylist({name: "", description: ""})
  };

  if (isLoading) {
    return (
      <div className="d-flex justify-content-center pt-5">
        <div
          className="spinner-border primary-success"
          style={{ width: "10rem", height: "10rem" }}
          role="status"
        >
          <span className="sr-only"></span>
        </div>
      </div>
    );
  } else {
    return (
      <div className="m-5 p-5">
        <div className="mb-3">
          <FormRowSelect
            name="playlistOneId"
            label="First playlist"
            placeholder="Lofi beats"
            list={allPlaylists}
            handleChange={playlistChange}
          />
        </div>
        <div className="mb-3">
          <FormRowSelect
            label="Second playlist"
            name="playlistTwoId"
            list={allPlaylists}
            handleChange={playlistChange}
          />
        </div>
        {newPlaylist && (
          <div className="container-fluid p-0 mb-3">
            <div className="mb-3">
              <FormRow
                label="Playlist name"
                name="name"
                type="text"
                handleChange={handleDetailsChange}
              />
            </div>
            <div className="input-group container-sm">
              <span
                className="input-group-text"
                style={{ background: "transparent" }}
              >
                Description
              </span>
              <textarea
                className="form-control"
                style={{ background: "transparent", color: "white" }}
                aria-label="With textarea"
                name="description"
                value={playlist.description}
                onChange={handleDetailsChange}
              ></textarea>
            </div>
          </div>
        )}
        <div className="container-sm form-check d-flex justify-content-center mb-3">
          <input
            className="form-check-input"
            type="checkbox"
            id="flexCheckDefault"
            checked={newPlaylist}
            onChange={() => setNewPlaylist(!newPlaylist)}
          />
          <label className="form-check-label px-2" htmlFor="flexCheckDefault">
            Create new playlist
          </label>
        </div>
        <div className="text-center">
          <button className="btn btn-custom btn-lg" onClick={handleClick}>
            Merge playlists
          </button>
        </div>
      </div>
    );
  }
};

export default Dashboard;
